AWSTemplateFormatVersion: 2010-09-09
Description: Create wordpress environment

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/26

  PublicSubnetCidr:
    Type: String
    Default: 10.0.0.0/28

  DatabaseSubnetACidr:
    Type: String
    Default: 10.0.0.16/28

  DatabaseSubnetCCidr:
    Type: String
    Default: 10.0.0.32/28

  AMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  DBMasterUserPassword:
    Type: String
    Description: You have to chage Default Value below.
    Default: password

  SSHPemFilename:
    Type: String
    Default: tuimac

  TagKey:
    Type: String
    Default: Environment

  TagValue:
    Type: String
    Default: Production

Resources:
  # VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Name
          Value: WordPress
 
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Name
          Value: WordPress

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  # Subnet
  WordPressSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: ap-northeast-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Name
          Value: WordPress-a

  DatabaseSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref DatabaseSubnetACidr
      AvailabilityZone: ap-northeast-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Name
          Value: Database-a

  DatabaseSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref DatabaseSubnetCCidr
      AvailabilityZone: ap-northeast-1c
      MapPublicIpOnLaunch: false
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Name
          Value: Database-c

  # RouteTable
  WordPressRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Name
          Value: WordPress

  WordPressRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WordPressRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  WordPressRouteTableAccociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WordPressRouteTable
      SubnetId: !Ref WordPressSubnet

  DatabaseRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Name
          Value: Database

  DatabaseRouteTableAccociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnetA

  DatabaseRouteTableAccociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnetC

  # Security Group
  WordPressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WordPress
      GroupDescription: WordPress Firewall
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Inbound HTTP from ANY
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Inbound HTTPS from ANY
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: !Ref VpcCidr
          Description: Outboud traffic from this host to WordPress VPC range
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow access to the Internet by HTTPS
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow access to the Internet by HTTP
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Name
          Value: WordPress

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Database
      GroupDescription: Database Firewall
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WordPressSecurityGroup
          Description: Inbound ODBC from WordPress Container Server
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Name
          Value: Database

  # Endpoint
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: '{
        "Version": "2012-10-17",
        "Statement":[{
          "Effect": "Allow",
          "Principal": "*",
          "Action": "*",
          "Resource": "*"
        }]
      }'
      RouteTableIds:
        - !Ref WordPressRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref Vpc

  # RDS
  WordPressDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: For WordPress Database
      SubnetIds:
        - !Ref DatabaseSubnetA
        - !Ref DatabaseSubnetC
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Name
          Value: WordPress

  WordPressDB:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mysql
      EngineVersion: 5.7.31
      DBInstanceIdentifier: wordpress
      MasterUsername: admin
      MasterUserPassword: !Ref DBMasterUserPassword
      DBInstanceClass: db.t2.micro
      StorageType: gp2
      AllocatedStorage: 20
      AvailabilityZone: ap-northeast-1a
      DBSubnetGroupName: !Ref WordPressDBSubnetGroup
      PubliclyAccessible: false
      VPCSecurityGroups: 
        - !Ref DatabaseSecurityGroup
      MultiAZ: false
      Port: 3306
      DBName: wordpress
      BackupRetentionPeriod: 1
      PreferredBackupWindow: 18:30-19:30
      CopyTagsToSnapshot: true
      AutoMinorVersionUpgrade: true
      PreferredMaintenanceWindow: Sat:17:30-Sat:18:30
      DeleteAutomatedBackups: true
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Name
          Value: WordPress

  # EC2 Instance
  WordPress:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIID
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          Description: WordPress Instance Primary ENI
          GroupSet:
            - !Ref WordPressSecurityGroup
          SubnetId: !Ref WordPressSubnet
          DeviceIndex: 0
      KeyName: !Ref SSHPemFilename
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Name
          Value: WordPress
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            LOG=/var/log/user-data.log
            touch $LOG
            exec >> $LOG 2>&1
                yum update -y
                yum install -y docker git
                systemctl enable docker
                systemctl start docker
                usermod -aG docker ec2-user
                curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
                BASEDIR=/home/ec2-user/wordpress
                mkdir $BASEDIR
                cd $BASEDIR
                export DBHOST=${DBHOST}
                export DBPASSWD=${DBPASSWD}
                echo 'DBHOST='${DBHOST} >> /etc/environment
                echo 'DBPASSWD='${DBPASSWD} >> /etc/environment
                curl -L https://raw.githubusercontent.com/tuimac/wordpress/main/docker/docker-compose.yaml -o docker-compose.yaml
                sleep 3
                docker-compose up -d
          - {
              DBHOST: !GetAtt WordPressDB.Endpoint.Address,
              DBPASSWD: !Ref DBMasterUserPassword
            }

  # Elastic IP
  WordPressEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref WordPress
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Name
          Value: WordPress
